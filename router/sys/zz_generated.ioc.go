//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package sys

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/gin-gonic/gin"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &sysRouter_{}
		},
	})
	sysRouterStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &SysRouter{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(sysRouterStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &sysUserRouter_{}
		},
	})
	sysUserRouterStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &SysUserRouter{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(sysUserRouterStructDescriptor)
}

type sysRouter_ struct {
}

type sysUserRouter_ struct {
	InitRouter_ func(Router *gin.RouterGroup)
}

func (s *sysUserRouter_) InitRouter(Router *gin.RouterGroup) {
	s.InitRouter_(Router)
}

type SysRouterIOCInterface interface {
}

type SysUserRouterIOCInterface interface {
	InitRouter(Router *gin.RouterGroup)
}

var _sysRouterSDID string

func GetSysRouterSingleton() (*SysRouter, error) {
	if _sysRouterSDID == "" {
		_sysRouterSDID = util.GetSDIDByStructPtr(new(SysRouter))
	}
	i, err := singleton.GetImpl(_sysRouterSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*SysRouter)
	return impl, nil
}

func GetSysRouterIOCInterfaceSingleton() (SysRouterIOCInterface, error) {
	if _sysRouterSDID == "" {
		_sysRouterSDID = util.GetSDIDByStructPtr(new(SysRouter))
	}
	i, err := singleton.GetImplWithProxy(_sysRouterSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(SysRouterIOCInterface)
	return impl, nil
}

type ThisSysRouter struct {
}

func (t *ThisSysRouter) This() SysRouterIOCInterface {
	thisPtr, _ := GetSysRouterIOCInterfaceSingleton()
	return thisPtr
}

var _sysUserRouterSDID string

func GetSysUserRouterSingleton() (*SysUserRouter, error) {
	if _sysUserRouterSDID == "" {
		_sysUserRouterSDID = util.GetSDIDByStructPtr(new(SysUserRouter))
	}
	i, err := singleton.GetImpl(_sysUserRouterSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*SysUserRouter)
	return impl, nil
}

func GetSysUserRouterIOCInterfaceSingleton() (SysUserRouterIOCInterface, error) {
	if _sysUserRouterSDID == "" {
		_sysUserRouterSDID = util.GetSDIDByStructPtr(new(SysUserRouter))
	}
	i, err := singleton.GetImplWithProxy(_sysUserRouterSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(SysUserRouterIOCInterface)
	return impl, nil
}

type ThisSysUserRouter struct {
}

func (t *ThisSysUserRouter) This() SysUserRouterIOCInterface {
	thisPtr, _ := GetSysUserRouterIOCInterfaceSingleton()
	return thisPtr
}
