//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package router

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &routerMain_{}
		},
	})
	routerMainStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &RouterMain{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(routerMainStructDescriptor)
}

type routerMain_ struct {
}

type RouterMainIOCInterface interface {
}

var _routerMainSDID string

func GetRouterMainSingleton() (*RouterMain, error) {
	if _routerMainSDID == "" {
		_routerMainSDID = util.GetSDIDByStructPtr(new(RouterMain))
	}
	i, err := singleton.GetImpl(_routerMainSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*RouterMain)
	return impl, nil
}

func GetRouterMainIOCInterfaceSingleton() (RouterMainIOCInterface, error) {
	if _routerMainSDID == "" {
		_routerMainSDID = util.GetSDIDByStructPtr(new(RouterMain))
	}
	i, err := singleton.GetImplWithProxy(_routerMainSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(RouterMainIOCInterface)
	return impl, nil
}

type ThisRouterMain struct {
}

func (t *ThisRouterMain) This() RouterMainIOCInterface {
	thisPtr, _ := GetRouterMainIOCInterfaceSingleton()
	return thisPtr
}
