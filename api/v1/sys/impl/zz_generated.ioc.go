//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package impl

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/gin-gonic/gin"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &user_{}
		},
	})
	userStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &User{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(userStructDescriptor)
}

type user_ struct {
	CreateUser_ func(ctx *gin.Context)
}

func (u *user_) CreateUser(ctx *gin.Context) {
	u.CreateUser_(ctx)
}

type UserIOCInterface interface {
	CreateUser(ctx *gin.Context)
}

var _userSDID string

func GetUserSingleton() (*User, error) {
	if _userSDID == "" {
		_userSDID = util.GetSDIDByStructPtr(new(User))
	}
	i, err := singleton.GetImpl(_userSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*User)
	return impl, nil
}

func GetUserIOCInterfaceSingleton() (UserIOCInterface, error) {
	if _userSDID == "" {
		_userSDID = util.GetSDIDByStructPtr(new(User))
	}
	i, err := singleton.GetImplWithProxy(_userSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(UserIOCInterface)
	return impl, nil
}

type ThisUser struct {
}

func (t *ThisUser) This() UserIOCInterface {
	thisPtr, _ := GetUserIOCInterfaceSingleton()
	return thisPtr
}
